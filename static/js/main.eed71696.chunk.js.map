{"version":3,"sources":["components/HelpInstructions/instructions/MicrobitWebUSBGrapher-Instructions.pdf","utils/microbit-api.js","components/AddMicroButton/index.js","components/MicrobitGraph/components/PlayButton/index.js","components/MicrobitGraph/components/SaveData/index.js","components/MicrobitGraph/components/DisconnectMicroButton/index.js","components/MicrobitGraph/components/BrushChart/BrushChart.js","components/MicrobitGraph/components/Title/index.js","components/MicrobitGraph/index.js","components/StickyStatistics/index.js","components/HelpInstructions/index.js","containers/Home/App.js","utils/serviceWorker.js","index.js","containers/Home/microbit-Serial-Data-Example.hex"],"names":["module","exports","Promise","delay","duration","resolve","reject","setTimeout","DAPOutReportRequest","requestType","recipient","request","value","index","DAPInReportRequest","uBitConnectDevice","callback","navigator","usb","requestDevice","filters","vendorId","productId","then","d","opened","device","buffer","decoder","TextDecoder","parser","controlTransferOutFN","data","controlTransferOut","open","selectConfiguration","claimInterface","Uint8Array","from","transferLoop","controlTransferIn","status","arr","length","len","msg","slice","string","decode","firstNewline","indexOf","messageToNewline","now","Date","parseResult","exec","graph","series","callbackType","isNaN","parseFloat","time","catch","error","close","uBitOpenDevice","AddMicroButton","props","Button","size","onClick","e","onAddComplete","Icon","name","PlayButton","this","isRunning","icon","labelPosition","color","style","width","Component","SaveDataButton","csvData","fileName","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","type","Blob","FileSaver","exportToCSV","DisconnectMicroButton","disconnectMicro","disconnectDevice","state","setState","Confirm","header","content","confirmButton","onCancel","onConfirm","BrushChart","options","chart","id","height","toolbar","autoSelected","show","colors","stroke","dataLabels","enabled","fill","opacity","markers","xaxis","categories","seriesLine","optionsLine","brush","target","selection","gradient","opacityFrom","opacityTo","tooltip","yaxis","tickAmount","seconds","runRealtimeData","undefined","prevState","fake","concat","faker","finance","amount","push","setCSVData","console","log","interval","setInterval","tick","pushRealtimeData","clearInterval","React","Title","handleSubmit","handleChange","Container","textAlign","Header","title","animated","margin","Content","hidden","visible","fitted","Modal","onSubmit","closeOnDimmerClick","onClose","Input","placeholder","onChange","Actions","negative","positive","MicrobitGraph","bind","updatedData","map","val","key","graphs","Table","definition","Body","Row","Cell","verticalAlign","playOnClick","Divider","SaveData","moment","format","Statistic","Value","Label","StickyStatistics","Segment","backgroundColor","Rail","position","Sticky","Group","microbitsConnected","HelpButton","activeIndex","closeConfigShow","closeOnEscape","handleClick","titleProps","newIndex","closeIcon","rel","href","pdf","Accordion","styled","fluid","active","src","class","App","handleItemClick","activeTab","contextRef","createRef","devices","microbitCallBack","str","out","pos","charCodeAt","Math","pow","serialNumber","createGraph","seriesData","specificGraph","convertLetterToNumber","round","toString","updatedGraph","deviceSerial","timeElapsed","uBitDisconnect","as","inverted","Subheader","marginBottom","element","document","createElement","setAttribute","hexFile","body","appendChild","click","removeChild","generateFakeGraph","marginTop","Menu","attached","tabular","Object","keys","Item","areaHeight","updatedGraphs","assign","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eed71696.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/MicrobitWebUSBGrapher-Instructions.3fe99ffe.pdf\";","/* eslint-disable no-unused-vars */\r\n\r\n/*\r\n * JavaScript functions for interacting with micro:bit microcontrollers over WebUSB\r\n * (Only works in Chrome browsers;  Pages must be either HTTPS or local)\r\n */\r\n\r\n// Add a delay() method to promises \r\n// NOTE: I found this on-line somewhere but didn't note the source and haven't been able to find it!\r\nPromise.delay = function(duration){\r\n    return new Promise(function(resolve, reject){\r\n        setTimeout(function(){\r\n            resolve();\r\n        }, duration)\r\n    });\r\n}\r\n\r\nconst MICROBIT_VENDOR_ID = 0x0d28\r\nconst MICROBIT_PRODUCT_ID = 0x0204\r\nconst MICROBIT_DAP_INTERFACE = 4\r\n\r\nconst controlTransferGetReport = 0x01\r\nconst controlTransferSetReport = 0x09\r\nconst controlTransferOutReport = 0x200\r\nconst controlTransferInReport = 0x100\r\n\r\nconst uBitBadMessageDelay = 500         // Delay if message failed\r\nconst uBitIncompleteMessageDelay = 150  // Delay if no message ready now\r\nconst uBitGoodMessageDelay = 20         // Time to try again if message was good\r\n\r\n\r\nconst DAPOutReportRequest = {\r\n    requestType: \"class\",\r\n    recipient: \"interface\",\r\n    request: controlTransferSetReport,\r\n    value: controlTransferOutReport,\r\n    index: MICROBIT_DAP_INTERFACE\r\n}\r\n\r\nconst DAPInReportRequest =  {\r\n    requestType: \"class\",\r\n    recipient: \"interface\",\r\n    request: controlTransferGetReport,\r\n    value: controlTransferInReport,\r\n    index: MICROBIT_DAP_INTERFACE\r\n}\r\n\r\n\r\n/*\r\n   Open and configure a selected device and then start the read-loop\r\n */\r\nfunction uBitOpenDevice(device, callback) {\r\n    let buffer=\"\"                               // Buffer of accumulated messages\r\n    let decoder = new TextDecoder(\"utf-8\")      // Decoder for byte->utf conversion\r\n    const parser = /([^.:]*)\\.*([^:]+|):(.*)/   // Parser to identify time-series format (graph:info or graph.series:info)\r\n\r\n    let transferLoop = function () {\r\n        device.controlTransferOut(DAPOutReportRequest, Uint8Array.from([0x83])) // DAP ID_DAP_Vendor3: https://github.com/ARMmbed/DAPLink/blob/0711f11391de54b13dc8a628c80617ca5d25f070/source/daplink/cmsis-dap/DAP_vendor.c\r\n          .then(() => device.controlTransferIn(DAPInReportRequest, 64))\r\n          .then((data) => { \r\n            if (data.status !== \"ok\") {\r\n                return Promise.delay(uBitBadMessageDelay).then(transferLoop);\r\n            }\r\n            // First byte is echo of get UART command: Ignore it\r\n\r\n            let arr = new Uint8Array(data.data.buffer)\r\n            if(arr.length<2)  // Not a valid array: Delay\r\n                return Promise.delay(uBitIncompleteMessageDelay).then(transferLoop)\r\n\r\n            // Data: Process and get more\r\n            let len = arr[1]  // Second byte is length of remaining message\r\n            if(len===0) // If no data: Delay\r\n                return Promise.delay(uBitIncompleteMessageDelay).then(transferLoop)\r\n            \r\n            let msg = arr.slice(2,2+len)  // Get the actual UART bytes\r\n            let string =  decoder.decode(msg);\r\n            buffer += string;\r\n            let firstNewline = buffer.indexOf(\"\\n\")\r\n            while(firstNewline>=0) {\r\n                let messageToNewline = buffer.slice(0,firstNewline)\r\n                let now = new Date() \r\n                // Deal with line\r\n                // If it's a graph/series format, break it into parts\r\n                let parseResult = parser.exec(messageToNewline)\r\n                if(parseResult) {\r\n                    let graph = parseResult[1]\r\n                    let series = parseResult[2]\r\n                    let data = parseResult[3]\r\n                    let callbackType = \"graph-event\"\r\n                    // If data is numeric, it's a data message and should be sent as numbers\r\n                    if(!isNaN(data)) {\r\n                        callbackType = \"graph-data\"\r\n                        data = parseFloat(data)\r\n                    }\r\n                    // Build and send the bundle\r\n                    let dataBundle = {\r\n                        time: now,\r\n                        graph: graph, \r\n                        series: series, \r\n                        data: data\r\n                    }\r\n                    callback(callbackType, device, dataBundle)\r\n                } else {\r\n                    // Not a graph format.  Send it as a console bundle\r\n                    let dataBundle = {time: now, data: messageToNewline}\r\n                    callback(\"console\", device, dataBundle)\r\n                }\r\n\r\n                buffer = buffer.slice(firstNewline+1)  // Advance to after newline\r\n                firstNewline = buffer.indexOf(\"\\n\")    // See if there's more data\r\n            }\r\n            // Delay long enough for complete message\r\n            return Promise.delay(uBitGoodMessageDelay).then(transferLoop);\r\n        })\r\n        // Error here probably means micro:bit disconnected\r\n        .catch(error => { if(device.opened) callback(\"error\", device, error); device.close(); callback(\"disconnected\", device, null);});\r\n    }\r\n\r\n    function controlTransferOutFN(data) {\r\n        return () => { return device.controlTransferOut(DAPOutReportRequest, data) }\r\n    }\r\n    \r\n    device.open()\r\n          .then(() => device.selectConfiguration(1))\r\n          .then(() => device.claimInterface(4))\r\n          .then(controlTransferOutFN(Uint8Array.from([2, 0])))  // Connect in default mode: https://arm-software.github.io/CMSIS_5/DAP/html/group__DAP__Connect.html\r\n          .then(controlTransferOutFN(Uint8Array.from([0x11, 0x80, 0x96, 0x98, 0]))) // Set Clock: 0x989680 = 10MHz : https://arm-software.github.io/CMSIS_5/DAP/html/group__DAP__SWJ__Clock.html\r\n          .then(controlTransferOutFN(Uint8Array.from([0x13, 0]))) // SWD Configure (1 clock turn around; no wait/fault): https://arm-software.github.io/CMSIS_5/DAP/html/group__DAP__SWD__Configure.html\r\n          .then(controlTransferOutFN(Uint8Array.from([0x82, 0x00, 0xc2, 0x01, 0x00]))) // Vendor Specific command 2 (ID_DAP_Vendor2): https://github.com/ARMmbed/DAPLink/blob/0711f11391de54b13dc8a628c80617ca5d25f070/source/daplink/cmsis-dap/DAP_vendor.c ;  0x0001c200 = 115,200kBps\r\n          .then(() => { callback(\"connected\", device, null); return Promise.resolve()}) \r\n          .then(transferLoop)\r\n          .catch(error => callback(\"error\", device, error))\r\n}\r\n\r\n/**\r\n * Disconnect from a device \r\n * @param {USBDevice} device to disconnect from \r\n */\r\nexport function uBitDisconnect(device) {\r\n    if(device && device.opened) {\r\n        device.close()\r\n    }\r\n}\r\n\r\n/**\r\n * Send a string to a specific device\r\n * @param {USBDevice} device \r\n * @param {string} data to send (must not include newlines)\r\n */\r\nfunction uBitSend(device, data) {\r\n    if(!device.opened)\r\n        return\r\n    // Need to send 0x84 (command), length (including newline), data's characters, newline\r\n    let fullLine = data+'\\n'\r\n    let encoded = new TextEncoder(\"utf-8\").encode(fullLine)\r\n    let message = new Uint8Array(1+1+fullLine.length)\r\n    message[0] = 0x84\r\n    message[1] = encoded.length\r\n    message.set(encoded, 2)\r\n    device.controlTransferOut(DAPOutReportRequest, message) // DAP ID_DAP_Vendor3: https://github.com/ARMmbed/DAPLink/blob/0711f11391de54b13dc8a628c80617ca5d25f070/source/daplink/cmsis-dap/DAP_vendor.c\r\n}\r\n\r\n\r\n/**\r\n * Callback for micro:bit events\r\n * \r\n \r\n   Event data varies based on the event string:\r\n  <ul>\r\n   <li>\"connection failure\": null</li>\r\n   <li>\"connected\": null</li>\r\n   <li>\"disconnected\": null</li>\r\n   <li>\"error\": error object</li>\r\n   <li>\"console\":  { \"time\":Date object \"data\":string}</li>\r\n   <li>\"graph-data\": { \"time\":Date object \"graph\":string \"series\":string \"data\":number}</li>\r\n   <li>\"graph-event\": { \"time\":Date object \"graph\":string \"series\":string \"data\":string}</li>\r\n  </ul>\r\n * @callback uBitEventCallback\r\n * @param {string} event (\"connection failure\", \"connected\", \"disconnected\", \"error\", \"console\", \"graph-data\", \"graph-event\" )\r\n * @param {USBDevice} device triggering the callback\r\n * @param {*} data (event-specific data object). See list above for variants\r\n * \r\n */\r\n\r\n\r\n/**\r\n * Allow users to select a device to connect to.\r\n * \r\n * @param {uBitEventCallback} callback function for device events\r\n */\r\nexport function uBitConnectDevice(callback) { \r\n    navigator.usb.requestDevice({filters: [{ vendorId: MICROBIT_VENDOR_ID, productId: 0x0204 }]})\r\n        .then(  d => { if(!d.opened) uBitOpenDevice(d, callback)} )\r\n        .catch( () => callback(\"connection failure\", null, null))\r\n}","import React from 'react';\r\nimport { Button, Icon } from 'semantic-ui-react';\r\nimport { uBitConnectDevice } from '../../utils/microbit-api';\r\n\r\n/**\r\n * AddMicroButton\r\n * @param {*} props\r\n *  onAddComplete: callback function when the mirco is added or failed to add\r\n *   The call back should take at least three parameters\r\n *     1. type: This is the type of message sent from the micro\r\n *     2. device: This is an id for the device\r\n *     3. data: Whatever data the micro sends \r\n */\r\nexport function AddMicroButton(props) {\r\n  let connectMicro = () => {\r\n    uBitConnectDevice(props.onAddComplete);\r\n  };\r\n\r\n  return (\r\n    <Button size=\"big\" onClick={(e) => connectMicro()}>\r\n      <Icon name=\"plus\" />Add Micro:bit\r\n    </Button>\r\n  );\r\n}\r\n","import React, {Component} from 'react';\r\nimport {Icon, Button} from 'semantic-ui-react';\r\n\r\nclass PlayButton extends Component {\r\n  render () {\r\n    return this.props.isRunning\r\n      ? <Button\r\n          icon\r\n          labelPosition=\"left\"\r\n          onClick={this.props.onClick}\r\n          color=\"red\"\r\n        >\r\n          <Icon name=\"pause\" />\r\n          Pause\r\n        </Button>\r\n      : <Button\r\n          icon\r\n          labelPosition=\"left\"\r\n          onClick={this.props.onClick}\r\n          color=\"green\"\r\n          style={{width: '115.28px'}}\r\n        >\r\n          <Icon name=\"play\" />\r\n          Play\r\n        </Button>;\r\n  }\r\n}\r\n\r\nexport default PlayButton;\r\n","import React, {Component} from 'react';\r\nimport {Icon, Button} from 'semantic-ui-react';\r\nimport * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n\r\nclass SaveDataButton extends Component {\r\n  render () {\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.csv';\r\n\r\n    const exportToCSV = (csvData, fileName) => {\r\n        const ws = XLSX.utils.json_to_sheet(csvData);\r\n        const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'csv', type: 'array' });\r\n        const data = new Blob([excelBuffer], {type: fileType});\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    }\r\n    return (\r\n      <Button\r\n        icon\r\n        labelPosition=\"left\"\r\n        onClick={(e)=> exportToCSV(this.props.csvData, this.props.fileName)}\r\n        color=\"grey\"\r\n        style={{width: '115.28px'}}\r\n      >\r\n        <Icon name=\"save\" />\r\n        Save\r\n      </Button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SaveDataButton;\r\n","import React, { Component } from 'react';\r\nimport { Button, Confirm } from 'semantic-ui-react';\r\n\r\nexport class DisconnectMicroButton extends Component {\r\n  disconnectMicro = () => {\r\n    this.props.disconnectDevice(this.props.device);\r\n  };\r\n\r\n  state = { open: false };\r\n\r\n  open = () => this.setState({ open: true });\r\n  close = () => this.setState({ open: false });\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button size=\"big\" onClick={this.open}>\r\n          Disconnect Device\r\n        </Button>\r\n        <Confirm\r\n          header=\"Confirm Disconnecting Micro:bit\"\r\n          content=\"Are you sure you want to disconnect this Micro:bit device?\"\r\n          confirmButton=\"Yes\"\r\n          open={this.state.open}\r\n          onCancel={this.close}\r\n          onConfirm={(e) => {\r\n            this.disconnectMicro();\r\n            this.close();\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisconnectMicroButton;\r\n","import React from 'react';\r\nimport Chart from 'react-apexcharts';\r\nimport faker from 'faker';\r\n\r\nexport class BrushChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      series: [\r\n        {\r\n          data: [],\r\n        },\r\n      ],\r\n      options: {\r\n        chart: {\r\n          id: 'chart2',\r\n          type: 'line',\r\n          height: 230,\r\n          toolbar: {\r\n            autoSelected: 'pan',\r\n            show: false,\r\n          },\r\n        },\r\n        colors: ['#546E7A'],\r\n        stroke: {\r\n          width: 3,\r\n        },\r\n        dataLabels: {\r\n          enabled: false,\r\n        },\r\n        fill: {\r\n          opacity: 1,\r\n        },\r\n        markers: {\r\n          size: 0,\r\n        },\r\n        xaxis: {\r\n          type: 'date',\r\n          categories: [],\r\n        },\r\n      },\r\n\r\n      seriesLine: [\r\n        {\r\n          data: [],\r\n        },\r\n      ],\r\n      optionsLine: {\r\n        chart: {\r\n          id: 'chart1',\r\n          height: 130,\r\n          type: 'area',\r\n          brush: {\r\n            target: 'chart2',\r\n            enabled: true,\r\n          },\r\n          selection: {\r\n            enabled: true,\r\n          },\r\n        },\r\n        colors: ['#008FFB'],\r\n        fill: {\r\n          type: 'gradient',\r\n          gradient: {\r\n            opacityFrom: 0.91,\r\n            opacityTo: 0.1,\r\n          },\r\n        },\r\n        xaxis: {\r\n          type: 'date',\r\n          tooltip: {\r\n            enabled: false,\r\n          },\r\n        },\r\n        yaxis: {\r\n          tickAmount: 2,\r\n        },\r\n      },\r\n      seconds: 0,\r\n    };\r\n  }\r\n\r\n  tick() {\r\n    if (\r\n      this.props.runRealtimeData &&\r\n      this.props.series[0].data[0] !== undefined\r\n    ) {\r\n      this.setState((prevState) => ({\r\n        seconds: prevState.seconds + 1,\r\n      }));\r\n    } else {\r\n      this.setState((prevState) => ({\r\n        seconds: prevState.seconds,\r\n      }));\r\n    }\r\n  }\r\n\r\n  pushRealtimeData() {\r\n    if (this.props.runRealtimeData && this.props.fake) {\r\n      this.setState({\r\n        series: [\r\n          {\r\n            data: this.state.series[0].data.concat(faker.finance.amount()),\r\n          },\r\n        ],\r\n\r\n        seriesLine: [\r\n          {\r\n            data: this.state.series[0].data,\r\n          },\r\n        ],\r\n        options: {\r\n          xaxis: {\r\n            type: 'datetime',\r\n            categories: this.state.options.xaxis.categories.push(\r\n              this.state.seconds\r\n            ),\r\n          },\r\n        },\r\n      });\r\n\r\n      this.props.setCSVData(this.state.series[0].data);\r\n    } else if (\r\n      this.state.series[0].data != null &&\r\n      this.state.series[0].data !== undefined &&\r\n      this.props.runRealtimeData &&\r\n      this.props.series[0].data[this.state.seconds] !== undefined\r\n    ) {\r\n      console.log(this.state.seconds);\r\n      console.log(this.props.series[0].data[this.state.seconds]);\r\n\r\n      this.setState({\r\n        series: [\r\n          {\r\n            data: this.state.series[0].data.concat(\r\n              this.props.series[0].data[this.state.seconds]\r\n            ),\r\n          },\r\n        ],\r\n\r\n        seriesLine: [\r\n          {\r\n            data: this.state.series[0].data,\r\n          },\r\n        ],\r\n        options: {\r\n          xaxis: {\r\n            type: 'datetime',\r\n            categories: this.state.options.xaxis.categories.push(\r\n              this.state.seconds\r\n            ),\r\n          },\r\n        },\r\n      });\r\n\r\n      this.props.setCSVData(this.state.series[0].data);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => this.tick(), 1000);\r\n    this.interval = setInterval(() => this.pushRealtimeData(), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Chart options={this.state.options} series={this.state.series} />\r\n        <Chart\r\n          options={this.state.optionsLine}\r\n          series={this.state.seriesLine}\r\n          type=\"area\"\r\n          height={130}\r\n        />\r\n        <div>Timer: {this.state.seconds}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {\r\n  Button,\r\n  Header,\r\n  Container,\r\n  Icon,\r\n  Modal,\r\n  Input,\r\n} from 'semantic-ui-react';\r\n\r\nclass Title extends Component {\r\n  state = { open: false };\r\n\r\n  show = () => {\r\n    this.setState({ open: true });\r\n  };\r\n  close = () => this.setState({ open: false });\r\n\r\n  handleSubmit = () => {\r\n    // if (\r\n    //   this.props.graphs !== undefined &&\r\n    //   this.props.graphs[this.props.key] !== undefined\r\n    // ) {\r\n    //   let deviceGraphs = Object.assign(this.props.graphs);\r\n    //   deviceGraphs[this.props.key].title = this.state.value;\r\n    //   this.props.setState({\r\n    //     graphs: deviceGraphs,\r\n    //   });\r\n    // }\r\n  };\r\n\r\n  handleChange = (e, { value }) => this.setState({ value });\r\n\r\n  render() {\r\n    const { open } = this.state;\r\n    console.log(this.state);\r\n    return (\r\n      <Container textAlign=\"center\">\r\n        {/* <Header\r\n          content={this.props.title}\r\n          size=\"huge\"\r\n          style={{ color: '#FFF' }}\r\n        /> */}\r\n        <Header size=\"huge\" style={{ color: '#FFF' }}>\r\n          {this.props.title}\r\n\r\n          <Button\r\n            animated=\"vertical\"\r\n            style={{ margin: '0 0 5px 15px' }}\r\n            onClick={this.show}\r\n          >\r\n            <Button.Content hidden>Edit</Button.Content>\r\n            <Button.Content visible>\r\n              <Icon fitted name=\"pencil\" />\r\n            </Button.Content>\r\n          </Button>\r\n        </Header>\r\n\r\n        <Modal\r\n          onSubmit={this.handleSubmit()}\r\n          size={'mini'}\r\n          closeOnDimmerClick={false}\r\n          open={open}\r\n          onClose={this.close}\r\n        >\r\n          <Modal.Header>Edit Title</Modal.Header>\r\n\r\n          <Modal.Content>\r\n            <Input\r\n              placeholder=\"Edit\"\r\n              type=\"text\"\r\n              name=\"title\"\r\n              onChange={this.handleChange}\r\n              style={{ width: '100%' }}\r\n            />\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button negative onClick={this.close}>\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              positive\r\n              onClick={this.close}\r\n              icon=\"checkmark\"\r\n              labelPosition=\"right\"\r\n              content=\"Save\"\r\n              type=\"submit\"\r\n            />\r\n          </Modal.Actions>\r\n        </Modal>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Title;\r\n","import React, { Component } from 'react';\r\nimport { Container, Table, Divider, Statistic, Icon } from 'semantic-ui-react';\r\nimport PlayButton from './components/PlayButton';\r\nimport SaveDataButton from './components/SaveData';\r\nimport DisconnectMicroButton from './components/DisconnectMicroButton';\r\nimport { BrushChart } from './components/BrushChart/BrushChart';\r\nimport moment from 'moment';\r\nimport Title from './components/Title';\r\n\r\nclass MicrobitGraph extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      csvData: [],\r\n    };\r\n    this.setCSVData = this.setCSVData.bind(this);\r\n  }\r\n\r\n  setCSVData(csvData) {\r\n    var updatedData = csvData.map(function(val, index) {\r\n      return { key: index, value: val };\r\n    });\r\n\r\n    this.setState({\r\n      csvData: updatedData,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <Title\r\n            title={this.props.title}\r\n            graphs={this.props.graphs}\r\n            key={this.props.key}\r\n            setState={this.props.setState}\r\n          />\r\n          <Table definition textAlign=\"center\">\r\n            <Table.Body>\r\n              <Table.Row>\r\n                <Table.Cell width={2} verticalAlign=\"top\">\r\n                  <PlayButton\r\n                    isRunning={this.props.isRunning}\r\n                    onClick={this.props.playOnClick}\r\n                  />\r\n\r\n                  <Divider hidden />\r\n\r\n                  <SaveDataButton\r\n                    csvData={this.state.csvData}\r\n                    fileName={'microbit-usb-data-' + moment().format('MM-DD')}\r\n                  />\r\n\r\n                  <Divider hidden />\r\n\r\n                  <DisconnectMicroButton\r\n                    device={this.props.device}\r\n                    disconnectDevice={this.props.disconnectDevice.bind(this)}\r\n                  />\r\n\r\n                  <Statistic size=\"mini\" style={{}}>\r\n                    <Statistic.Value>\r\n                      <Icon name=\"clock outline\" /> 0\r\n                    </Statistic.Value>\r\n                    <Statistic.Label>Time Elapsed</Statistic.Label>\r\n                  </Statistic>\r\n                </Table.Cell>\r\n                <Table.Cell>\r\n                  {/* <BrushChart\r\n                    options={this.props.options}\r\n                    series={this.props.series}\r\n                    optionsLine={this.props.optionsLine}\r\n                    seriesLine={this.props.seriesLine}\r\n                    height={this.props.height}\r\n                    areaHeight={this.props.areaHeight}\r\n                  /> */}\r\n                  <BrushChart\r\n                    fake={this.props.fake}\r\n                    series={this.props.series}\r\n                    runRealtimeData={this.props.isRunning}\r\n                    setCSVData={this.setCSVData}\r\n                  />\r\n                </Table.Cell>\r\n              </Table.Row>\r\n            </Table.Body>\r\n          </Table>\r\n        </Container>\r\n        <Divider hidden />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MicrobitGraph;\r\n","import React, { Component } from 'react';\r\nimport {\r\n  Container,\r\n  Segment,\r\n  Rail,\r\n  Sticky,\r\n  Statistic,\r\n  Icon,\r\n} from 'semantic-ui-react';\r\n\r\nclass StickyStatistics extends Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Segment style={{ backgroundColor: '#252839' }}>\r\n          <Rail position=\"right\">\r\n            <Sticky>\r\n              <Segment textAlign=\"center\">\r\n                <Statistic.Group>\r\n                  <Statistic>\r\n                    <Statistic.Value>\r\n                      <Icon name=\"usb\" /> {this.props.microbitsConnected}\r\n                    </Statistic.Value>\r\n                    <Statistic.Label>Microbits Connected</Statistic.Label>\r\n                  </Statistic>\r\n                </Statistic.Group>\r\n              </Segment>\r\n            </Sticky>\r\n          </Rail>\r\n        </Segment>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StickyStatistics;\r\n","/* eslint-disable jsx-a11y/iframe-has-title */\r\n/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { Component } from 'react';\r\nimport {\r\n  Icon,\r\n  Button,\r\n  Modal,\r\n  Accordion,\r\n  Header,\r\n  Divider,\r\n} from 'semantic-ui-react';\r\nimport pdf from './instructions/MicrobitWebUSBGrapher-Instructions.pdf';\r\n\r\nclass HelpButton extends Component {\r\n  state = { open: false, activeIndex: -1 };\r\n\r\n  closeConfigShow = (closeOnEscape, closeOnDimmerClick) => () => {\r\n    this.setState({ closeOnEscape, closeOnDimmerClick, open: true });\r\n  };\r\n\r\n  close = () => this.setState({ open: false });\r\n\r\n  handleClick = (e, titleProps) => {\r\n    const { index } = titleProps;\r\n    const { activeIndex } = this.state;\r\n    const newIndex = activeIndex === index ? -1 : index;\r\n\r\n    this.setState({ activeIndex: newIndex });\r\n  };\r\n\r\n  render() {\r\n    const { open, closeOnEscape, closeOnDimmerClick, activeIndex } = this.state;\r\n    return (\r\n      <div>\r\n        <Button\r\n          onClick={this.closeConfigShow(true, false)}\r\n          icon\r\n          labelPosition=\"left\"\r\n          color=\"blue\"\r\n        >\r\n          <Icon name=\"question circle outline\" />\r\n          Help\r\n        </Button>\r\n        <Modal\r\n          open={open}\r\n          closeOnEscape={closeOnEscape}\r\n          closeOnDimmerClick={closeOnDimmerClick}\r\n          onClose={this.close}\r\n          closeIcon\r\n        >\r\n          <Modal.Header style={{ color: '#FFF', backgroundColor: '#252839' }}>\r\n            Micro:bit and Application Help\r\n          </Modal.Header>\r\n          <Modal.Content>\r\n            <Header>\r\n              Instructions:{' '}\r\n              <a target=\"_blank\" rel=\"noopener noreferrer\" href={pdf}>\r\n                Click to Download PDF\r\n              </a>\r\n            </Header>\r\n            <Divider />\r\n            <Header>Frequently Asked Questions (FAQ):</Header>\r\n            <Accordion styled fluid>\r\n              <Accordion.Title\r\n                active={activeIndex === 0}\r\n                index={0}\r\n                onClick={this.handleClick}\r\n              >\r\n                <Icon name=\"dropdown\" />\r\n                How to use the Micro:bit WebUSB Grapher?\r\n              </Accordion.Title>\r\n              <Accordion.Content active={activeIndex === 0}>\r\n                <iframe src={pdf} height=\"900\" width=\"900\" />\r\n              </Accordion.Content>\r\n\r\n              <Accordion.Title\r\n                active={activeIndex === 1}\r\n                index={1}\r\n                onClick={this.handleClick}\r\n              >\r\n                <Icon name=\"dropdown\" />\r\n                How to pair a Micro:bit device?\r\n              </Accordion.Title>\r\n              <Accordion.Content active={activeIndex === 1}>\r\n                <div class=\"ui grid stackable\">\r\n                  <div class=\"column five wide firmware\">\r\n                    <strong class=\"ui small\">\r\n                      You must have version 0249 or above of the firmware\r\n                    </strong>\r\n                    <div class=\"image\">\r\n                      <img class=\"ui image\" src=\"./images/firmware.png\" />\r\n                    </div>\r\n                    <a\r\n                      href=\"https://makecode.microbit.org/device/usb/webusb/troubleshoot\"\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                    >\r\n                      Check your firmware version here and update if needed\r\n                    </a>\r\n                  </div>\r\n                  <div class=\"column eleven wide instructions\">\r\n                    <div class=\"ui grid\">\r\n                      <div class=\"row\">\r\n                        <div class=\"column\">\r\n                          <div class=\"ui two column grid padded\">\r\n                            <div class=\"column\">\r\n                              <div class=\"ui\">\r\n                                <div class=\"image\">\r\n                                  <img\r\n                                    class=\"ui medium rounded image\"\r\n                                    src=\"./images/connect.png\"\r\n                                  />\r\n                                </div>\r\n                                <div class=\"content\">\r\n                                  <div class=\"description\">\r\n                                    <span class=\"ui purple circular label\">\r\n                                      1\r\n                                    </span>\r\n                                    <strong>\r\n                                      Connect the micro:bit to your computer\r\n                                      with a USB cable\r\n                                    </strong>\r\n                                    <br />\r\n                                    <span class=\"ui small\">\r\n                                      Use the microUSB port on the top of the\r\n                                      micro:bit\r\n                                    </span>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div class=\"column\">\r\n                              <div class=\"ui\">\r\n                                <div class=\"image\">\r\n                                  <img\r\n                                    class=\"ui medium rounded image\"\r\n                                    src=\"./images/pair.png\"\r\n                                  />\r\n                                </div>\r\n                                <div class=\"content\">\r\n                                  <div class=\"description\">\r\n                                    <span class=\"ui purple circular label\">\r\n                                      2\r\n                                    </span>\r\n                                    <strong>Pair your micro:bit</strong>\r\n                                    <br />\r\n                                    <span class=\"ui small\">\r\n                                      Click 'Pair device' below and select BBC\r\n                                      micro:bit CMSIS-DAP or DAPLink CMSIS-DAP\r\n                                      from the list\r\n                                    </span>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Accordion.Content>\r\n              <Accordion.Title\r\n                active={activeIndex === 2}\r\n                index={2}\r\n                onClick={this.handleClick}\r\n              >\r\n                <Icon name=\"dropdown\" />\r\n                How to program your Micro:bit?\r\n              </Accordion.Title>\r\n              <Accordion.Content active={activeIndex === 2}>\r\n                <div class=\"ui two column grid padded\">\r\n                  <div class=\"column\">\r\n                    <div class=\"ui\">\r\n                      <div class=\"image\">\r\n                        <img\r\n                          class=\"ui medium rounded image\"\r\n                          src=\"./images/connect.png\"\r\n                        />\r\n                      </div>\r\n                      <div class=\"content\">\r\n                        <div class=\"description\">\r\n                          <span class=\"ui purple circular label\">1</span>\r\n                          <strong>\r\n                            Connect the micro:bit to your computer with a USB\r\n                            cable\r\n                          </strong>\r\n                          <br />\r\n                          <span class=\"ui small\">\r\n                            Use the microUSB port on the top of the micro:bit\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"column\">\r\n                    <div class=\"ui\">\r\n                      <div class=\"image\">\r\n                        <img\r\n                          class=\"ui medium rounded image\"\r\n                          src=\"./images/transfer.png\"\r\n                        />\r\n                      </div>\r\n                      <div class=\"content\">\r\n                        <div class=\"description\">\r\n                          <span class=\"ui purple circular label\">2</span>\r\n                          <strong>Move the .hex file to the micro:bit</strong>\r\n                          <br />\r\n                          <span class=\"ui small\">\r\n                            Locate the downloaded .hex file and drag it to the\r\n                            MICROBIT drive\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Accordion.Content>\r\n            </Accordion>\r\n          </Modal.Content>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HelpButton;\r\n","import React, { createRef } from 'react';\r\nimport '../../styles/App.css';\r\nimport { Container, Menu, Button } from 'semantic-ui-react';\r\nimport { Header, Icon } from 'semantic-ui-react';\r\nimport { AddMicroButton } from '../../components/AddMicroButton';\r\nimport { uBitDisconnect } from '../../utils/microbit-api';\r\nimport MicrobitGraph from '../../components/MicrobitGraph';\r\nimport StickyStatistics from '../../components/StickyStatistics';\r\nimport HelpButton from '../../components/HelpInstructions';\r\nimport './App.css';\r\nimport hexFile from './microbit-Serial-Data-Example.hex';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // mirco connections\r\n      devices: {},\r\n      isRunning: false,\r\n      microbitsConnected: 0,\r\n      graphs: [],\r\n      seconds: 0,\r\n      activeTab: 'Microbit Graph 1',\r\n    };\r\n\r\n    this.microbitCallBack = this.microbitCallBack.bind(this);\r\n  }\r\n\r\n  convertLetterToNumber(str) {\r\n    var out = 0,\r\n      len = str.length;\r\n    for (var pos = 0; pos < len; pos++) {\r\n      out += (str.charCodeAt(pos) - 64) * Math.pow(26, len - pos - 1);\r\n    }\r\n    return out;\r\n  }\r\n\r\n  microbitCallBack(type, device, data) {\r\n    if (type === 'connected') {\r\n      let devices = this.state.devices;\r\n      devices[device.serialNumber] = device;\r\n      this.setState({ devices: devices });\r\n      this.createGraph(device);\r\n    }\r\n\r\n    let graphs = this.state.graphs;\r\n    let seriesData = data;\r\n\r\n    if (\r\n      device !== undefined &&\r\n      device !== null &&\r\n      device.serialNumber !== undefined &&\r\n      device.serialNumber !== null &&\r\n      graphs[device.serialNumber] !== undefined &&\r\n      graphs[device.serialNumber] !== null &&\r\n      graphs[device.serialNumber].series !== undefined &&\r\n      graphs[device.serialNumber].series !== null &&\r\n      seriesData !== null &&\r\n      seriesData !== undefined &&\r\n      seriesData.data !== undefined &&\r\n      seriesData.data !== undefined\r\n    ) {\r\n      let specificGraph = graphs[device.serialNumber];\r\n      let series = graphs[device.serialNumber].series[0];\r\n      if (isNaN(seriesData.data)) {\r\n        seriesData.data = this.convertLetterToNumber(seriesData.data);\r\n      }\r\n      seriesData.data = Math.round(10 * seriesData.data) / 10; // round to the nearest tenth\r\n      series.data.push(seriesData.data.toString());\r\n      let updatedGraph = [...graphs];\r\n      updatedGraph[device.serialNumber] = {\r\n        ...updatedGraph[device.serialNumber],\r\n        deviceSerial: specificGraph.deviceSerial,\r\n        title: specificGraph.title,\r\n        isRunning: specificGraph.isRunning,\r\n        timeElapsed: specificGraph.timeElapsed,\r\n        series: [series],\r\n        options: specificGraph.options,\r\n        seriesLine: specificGraph.seriesLine,\r\n        optionsLine: specificGraph.optionsLine,\r\n      };\r\n      this.setState({\r\n        graphs: updatedGraph,\r\n      });\r\n    }\r\n  }\r\n\r\n  disconnectDevice(device) {\r\n    uBitDisconnect(device);\r\n    let devices = this.state.devices;\r\n    let graphs = this.state.graphs;\r\n    delete devices[device.serialNumber];\r\n    delete graphs[device.serialNumber];\r\n    this.setState({\r\n      graphs: graphs,\r\n      devices: devices,\r\n      microbitsConnected: this.state.microbitsConnected - 1,\r\n    });\r\n  }\r\n\r\n  createGraph(device) {\r\n    if (this.state.graphs[device.serialNumber] === undefined) {\r\n      let graphs = this.state.graphs;\r\n      graphs[device.serialNumber] = {\r\n        fake: false,\r\n        deviceSerial: device.serialNumber,\r\n        title: 'Microbit Graph ' + (this.state.microbitsConnected + 1),\r\n        isRunning: false,\r\n        timeElapsed: 0,\r\n        series: [\r\n          {\r\n            data: [],\r\n          },\r\n        ],\r\n        options: {\r\n          chart: {\r\n            id: 'chart2',\r\n            type: 'line',\r\n            height: 230,\r\n            toolbar: {\r\n              autoSelected: 'pan',\r\n              show: false,\r\n            },\r\n          },\r\n          colors: ['#546E7A'],\r\n          stroke: {\r\n            width: 3,\r\n          },\r\n          dataLabels: {\r\n            enabled: false,\r\n          },\r\n          fill: {\r\n            opacity: 1,\r\n          },\r\n          markers: {\r\n            size: 0,\r\n          },\r\n          xaxis: {\r\n            type: 'date',\r\n            categories: [],\r\n          },\r\n        },\r\n\r\n        seriesLine: [\r\n          {\r\n            data: [],\r\n          },\r\n        ],\r\n        optionsLine: {\r\n          chart: {\r\n            id: 'chart1',\r\n            height: 130,\r\n            type: 'area',\r\n            brush: {\r\n              target: 'chart2',\r\n              enabled: true,\r\n            },\r\n            selection: {\r\n              enabled: true,\r\n            },\r\n          },\r\n          colors: ['#008FFB'],\r\n          fill: {\r\n            type: 'gradient',\r\n            gradient: {\r\n              opacityFrom: 0.91,\r\n              opacityTo: 0.1,\r\n            },\r\n          },\r\n          xaxis: {\r\n            type: 'date',\r\n            tooltip: {\r\n              enabled: false,\r\n            },\r\n          },\r\n          yaxis: {\r\n            tickAmount: 1,\r\n          },\r\n        },\r\n      };\r\n      this.setState({\r\n        graphs: graphs,\r\n        microbitsConnected: this.state.microbitsConnected + 1,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleItemClick = (e, { name }) => this.setState({ activeTab: name });\r\n\r\n  generateFakeGraph() {\r\n    let graphs = this.state.graphs;\r\n    graphs[this.state.microbitsConnected] = {\r\n      fake: true,\r\n      deviceSerial: this.state.microbitsConnected,\r\n      title: 'Microbit Graph ' + (this.state.microbitsConnected + 1),\r\n      isRunning: false,\r\n      timeElapsed: 0,\r\n      series: [\r\n        {\r\n          data: [],\r\n        },\r\n      ],\r\n      options: {\r\n        chart: {\r\n          id: 'chart2',\r\n          type: 'line',\r\n          height: 230,\r\n          toolbar: {\r\n            autoSelected: 'pan',\r\n            show: false,\r\n          },\r\n        },\r\n        colors: ['#546E7A'],\r\n        stroke: {\r\n          width: 3,\r\n        },\r\n        dataLabels: {\r\n          enabled: false,\r\n        },\r\n        fill: {\r\n          opacity: 1,\r\n        },\r\n        markers: {\r\n          size: 0,\r\n        },\r\n        xaxis: {\r\n          type: 'date',\r\n          categories: [],\r\n        },\r\n      },\r\n\r\n      seriesLine: [\r\n        {\r\n          data: [],\r\n        },\r\n      ],\r\n      optionsLine: {\r\n        chart: {\r\n          id: 'chart1',\r\n          height: 130,\r\n          type: 'area',\r\n          brush: {\r\n            target: 'chart2',\r\n            enabled: true,\r\n          },\r\n          selection: {\r\n            enabled: true,\r\n          },\r\n        },\r\n        colors: ['#008FFB'],\r\n        fill: {\r\n          type: 'gradient',\r\n          gradient: {\r\n            opacityFrom: 0.91,\r\n            opacityTo: 0.1,\r\n          },\r\n        },\r\n        xaxis: {\r\n          type: 'date',\r\n          tooltip: {\r\n            enabled: false,\r\n          },\r\n        },\r\n        yaxis: {\r\n          tickAmount: 1,\r\n        },\r\n      },\r\n    };\r\n    this.setState({\r\n      graphs: graphs,\r\n      microbitsConnected: this.state.microbitsConnected + 1,\r\n    });\r\n  }\r\n\r\n  contextRef = createRef();\r\n\r\n  render() {\r\n    const graphs = this.state.graphs;\r\n    const { activeTab } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Header as=\"h2\" icon inverted textAlign=\"center\">\r\n          <Icon name=\"line graph\" />\r\n          Micro: bit USB Grapher\r\n          <Header.Subheader>\r\n            Collect and graph data on one or more Micro: bits!\r\n          </Header.Subheader>\r\n        </Header>\r\n\r\n        <Container textAlign=\"right\" style={{ marginBottom: '-46px' }}>\r\n          <Button\r\n            onClick={() => {\r\n              var element = document.createElement('a');\r\n              element.setAttribute('href', hexFile);\r\n              element.setAttribute('download', 'microbitProgram.hex');\r\n\r\n              document.body.appendChild(element);\r\n              element.click();\r\n              document.body.removeChild(element);\r\n            }}\r\n          >\r\n            Download Hex File\r\n          </Button>\r\n\r\n          <HelpButton />\r\n        </Container>\r\n\r\n        <Container textAlign=\"left\">\r\n          <AddMicroButton onAddComplete={this.microbitCallBack} />\r\n          <Button\r\n            onClick={() => {\r\n              this.generateFakeGraph();\r\n            }}\r\n          >\r\n            <Icon name=\"plus\" />Add Fake Microbit\r\n          </Button>\r\n        </Container>\r\n\r\n        <Container textAlign=\"left\" style={{ marginTop: '10px' }}>\r\n          <Menu attached=\"top\" id=\"tabView\" tabular>\r\n            {Object.keys(graphs).map((key, index) => {\r\n              return (\r\n                <Menu.Item\r\n                  name={graphs[key].title}\r\n                  active={activeTab === graphs[key].title}\r\n                  onClick={this.handleItemClick}\r\n                />\r\n              );\r\n            })}\r\n          </Menu>\r\n        </Container>\r\n        <StickyStatistics\r\n          microbitsConnected={this.state.microbitsConnected}\r\n          timeElapsed={this.state.timeElapsed}\r\n        />\r\n        <Container>\r\n          {Object.keys(graphs).map((key, index) => {\r\n            if (\r\n              this.state.activeTab === graphs[key].title &&\r\n              graphs[key].title &&\r\n              graphs[key].options &&\r\n              graphs[key].series\r\n            ) {\r\n              console.log(this.state.fake)\r\n              return (\r\n                <div>\r\n                  <MicrobitGraph\r\n                    fake={graphs[key].fake}\r\n                    device={this.state.devices[key]}\r\n                    title={graphs[key].title}\r\n                    options={graphs[key].options}\r\n                    series={graphs[key].series}\r\n                    optionsLine={graphs[key].optionsLine}\r\n                    seriesLine={graphs[key].seriesLine}\r\n                    height={graphs[key].height}\r\n                    areaHeight={graphs[key].areaHeight}\r\n                    isRunning={graphs[key].isRunning}\r\n                    graphs={graphs}\r\n                    key={key}\r\n                    setState={this.setState}\r\n                    playOnClick={() => {\r\n                      let updatedGraphs = Object.assign(this.state.graphs);\r\n                      updatedGraphs[key].isRunning = updatedGraphs[key]\r\n                        .isRunning\r\n                        ? false\r\n                        : true;\r\n                      this.setState({\r\n                        graphs: updatedGraphs,\r\n                      });\r\n                    }}\r\n                    disconnectDevice={this.disconnectDevice.bind(this)}\r\n                  />\r\n                </div>\r\n              );\r\n            } else {\r\n              return <div />;\r\n            }\r\n          })}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './containers/Home/App';\r\nimport * as serviceWorker from './utils/serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/microbit-Serial-Data-Example.25a5d416.hex\";"],"sourceRoot":""}